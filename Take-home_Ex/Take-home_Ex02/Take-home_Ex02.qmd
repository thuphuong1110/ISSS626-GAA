---
title: "Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at province level using spatial and spatio-temporal statistics"
author: "Nguyen Bao Thu Phuong"
date: "13 October 2024" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Overview

## Setting the scene

## Objectives

## The Data

# Set up R environment

## Import R packages

The below code chunk uses `p_load()` of pacman package to install and load relevant packages into R environment.

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, corrplot)
```

## Set seed

We set the seed to ensure reproducibility and consistency of the remaining statistical tests and simulations to be done in this study.

```{r}
set.seed(2024)
```

# Import Geospatial and Aspatial Data

## Import Thailand province boundaries

The below code chunk uses st_read() to imports the administrative boundaries at province level (level 1) of Thailand.

```{r}
thailand_raw = st_read(dsn = "data/rawdata",layer = "tha_admbnda_adm1_rtsd_20220121")
```

Cast to Polygon geometry type

```{r}
thailand <- thailand_raw |>
  st_cast("POLYGON") |>
  mutate(area = st_area(geometry)) |> # Calculate the area of each polygon
  group_by(ADM1_EN) |> # Group by province
  filter(area == max(area)) |> # Keep the record with the largest area for each province
  ungroup() |> # Ungroup after filtering
  select(c("ADM1_EN"))
# change column name
colnames(thailand)[1] = "province_eng"
```

Check if the data contain any duplicate

```{r}
anyDuplicated(thailand)
```

We use **tmap** to plot the output and can see all the provinces of Thailand has been plotted properly. For provinces with small islands, only the mainland parts with the largest area are kept.

```{r}
tm_shape(thailand) +
  tm_polygons() +
  tm_text("province_eng", size = 0.2)
```

We check the `thailand` sf dataframe again, the geometry type is already POLYGON. We will use this sf dataframe to define the province boundaries for further analysis.

```{r}
thailand
```

## Import Domestic Tourism Statistics

Next we read in the domestic tourism statistics

```{r}
tourism_raw = read_csv("data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv") |>
  select(-c("province_thai","region_thai")) # exclude column in Thai language
```

After excluding the 2 columns in Thai language, the dataset includes the below columns and variables:

-   date: The month and year in which the statistics were recorded. The dataset covers the years 2019-2023.

-   province_eng:The name of the province in English.

-   region_eng:The name of the region in Thailand to which the province belongs, in English.

-   value: value of the data being recorded

-   variables:The 8 type of data being recorded as follows:

    -   ratio_tourist_stay: ratio of tourist stay over-night (total rooms booked/total available rooms)

    -   no_tourist_stay: The number of tourists who stay over-night

    -   no_tourist_all: The total number of domestic tourists who visited the province

    -   no_tourist_thai: The number of Thai tourists who visited the province

    -   no_tourist_foreign: The number of foreign tourists who visited the province

    -   revenue_all: The revenue generated by the tourism industry in the province, in Thai Baht

    -   revenue_thai: The revenue generated by Thai tourists in the province, in Thai Baht

    -   revenue_foreign: The revenue generated by foreign tourists in the province, in Thai Baht

```{r}
tourism <- tourism_raw %>%
  pivot_wider(names_from = variable, values_from = value) |>
  mutate(revenue_per_tourist = ifelse(no_tourist_all == 0, 0, revenue_all / no_tourist_all)) |>
  mutate(revenue_per_thai_tourist = ifelse(no_tourist_thai == 0,0,revenue_thai/no_tourist_thai)) |>
  mutate(revenue_per_foreign_tourist = ifelse(no_tourist_foreign == 0,0,revenue_foreign/no_tourist_foreign)) |>
  mutate(month_no = month(date)) %>%
  mutate(month_fac = month(date,
                       label = TRUE, abbr = TRUE)) %>%
  mutate(year = year(date)) |>
  mutate(month_year = format(as.Date(date), "%m%Y"))


# View the result
glimpse(tourism)
```

# Exploratory Data Analysis

## Correlation Matrix

```{r}
data_subset <- tourism[, c("revenue_all", "no_tourist_all", "ratio_tourist_stay","no_tourist_stay","no_tourist_thai","no_tourist_foreign","revenue_thai","revenue_foreign","revenue_per_tourist","revenue_per_thai_tourist","revenue_per_foreign_tourist")]

# Compute the correlation matrix
M <- cor(data_subset, use = "complete.obs")
```

```{r}
# Visualize the correlation matrix
corrplot(M, method = 'number',order = 'AOE', tl.cex = 0.6)
```

We exlcude these variables with strong correlation for further spatial and spatio-temporal analysis:

-   no_tourist_thai and revenue_thai: high correlation (0.96 and 0.94) with no_tourist_all

-   no_tourist_stay: high correlation (0.96) with no_tourist_all

-   no_tourist_foreign and revenue_foreign: high correlation (0.96 and 0.98) with revenue_all

-   revenue_per_foreign_tourist: high correlation (0.71) with revenue_per_tourist

## Tourism Monthly Trend

### Total Revenue

To understand if there is any seasonal factor impacting tourism in Thailand, the below code chunk uses `group_by()` to aggregate the `revenue_all` by month and year across all province, then `ggplot()` is used to plot the revenue trend by month by year.

```{r}
# Summarize the total revenue by month and year
tourism_month <- tourism %>%
  group_by(year, month_no) %>%            # Group by year and month
  summarize(total_revenue = sum(revenue_all)) %>%  # Sum revenue
  ungroup()
```

```{r}
ggplot(tourism_month, aes(x = month_no, y = total_revenue, color = factor(year), group = year)) +
  geom_line() +
  geom_point() +
  labs(title = "Total Revenue by Month and Year",
       x = "Month",
       y = "Total Revenue",
       color = "Year") +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Set x-axis to show all months
  theme_minimal()
```

From February 2020 to December 2021, total revenue from tourism is on a very low range compared to 2019 due to Covid impact. The revenue starts increasing again from January 2022 to February 2023 (the latest month with data available).

Below is an illustration on Covid timeline in Thailand in 2020.

![](data/thaidland%20covid%20timeline.png)

### Number of Tourists

Next we look at the monthly trend of spend per tourist

```{r}
tourists_month <- tourism %>%
  group_by(year, month_no) %>%            # Group by year and month
  summarize(no_tourist = sum(no_tourist_all)) %>%  # Sum number of tourists
  ungroup()
# Plot the data
ggplot(tourists_month, aes(x = month_no, y = no_tourist, color = factor(year), group = year)) +
  geom_line() +
  geom_point() +
  labs(title = "Number of Tourists by Month and Year",
       x = "Month",
       y = "Number of Tourists",
       color = "Year") +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Set x-axis to show all months
  theme_minimal()
```

The number of tourists show similar trend to total revenue

### Revenue per tourist

Next we look at the monthly trend of revenue per tourist.

```{r}
per_tourist_month <- tourism %>%
  group_by(year, month_no) %>%            # Group by year and month
  summarize(per_tourist = sum(revenue_all)/sum(no_tourist_all)) %>% 
  ungroup()
# Plot the data
ggplot(per_tourist_month, aes(x = month_no, y = per_tourist, color = factor(year), group = year)) +
  geom_line() +
  geom_point() +
  labs(title = "Revenue per Tourist by Month and Year",
       x = "Month",
       y = "Revenue per Tourist",
       color = "Year") +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Set x-axis to show all months
  theme_minimal()
```

The revenue per tourist in April and May 2020 are significantly higher than other months, this may be due to the pandemic travel bans and curfew happened during these 2 months, causing the number of tourists, especially foreign tourists to be very low.

## Tourism by Province in 2022

Focus on 2022 as this year the tourism industry in Thailand is showing signs of recovery after the pandemic.

### Total Revenue

revenue by province across all months in 2022.

```{r}
# Filter data for the year 2022 and aggregate by province
tourism_2022 <- tourism %>%
  filter(year == 2022) %>%
  group_by(province_eng) %>%
  summarize(total_revenue = sum(revenue_all))

# Plot a bar chart showing total revenue by province for 2022
p = ggplot(tourism_2022, aes(x = reorder(province_eng,total_revenue), y = total_revenue)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Total Revenue by Province in 2022",
       x = "Province",
       y = "Total Revenue") +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 0, hjust = 1)) +  # Ensure province labels are readable
  coord_flip()

# Adjusting height and width directly in R with ggsave()
ggsave("tourism_revenue_2022.png", plot = p, width = 8, height = 20)
p
```

### Number of Tourist by Province

```{r}
# Filter data for the year 2022 and aggregate by province
tourist_2022 <- tourism %>%
  filter(year == 2022) %>%
  group_by(province_eng) %>%
  summarize(total_tourist = sum(no_tourist_all))

# Plot a bar chart showing total revenue by province for 2022
ggplot(tourist_2022, aes(x = reorder(province_eng,total_tourist), y = total_tourist)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Total Revenue by Province in 2022",
       x = "Province",
       y = "Total Revenue") +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
  coord_flip()

```

# Data Wrangling

## Tourism Indicators of 2022

As the tourism economy was recovering in 2022 and this year is the latest year with data available for all months, we will use 2022 data to derive a tourism economy indicators layer within the study area in sf polygon dataframe.

```{r}
tourism_2022 = tourism |>
  filter(year == 2022) |>
  group_by(province_eng) |>
  summarize(no_tourist_all = sum(no_tourist_all),
            revenue_all = sum(revenue_all),
            avg_ratio_stay = mean(ratio_tourist_stay),
            revenue_per_tourist = sum(revenue_all)/sum(no_tourist_all),
            revenue_per_thai_tourist = sum(revenue_thai)/sum(no_tourist_thai))
```

Join with boundary sf dataframe

```{r}
thailand_tourism2022 <- left_join(thailand, tourism_2022)
```

Some records have NA values, this is due to some of the province's names in `thailand` boundary sf dataframe and `tourism` attribute dataframe are slightly different. The mismatch province names are filtered as below.

```{r}
tourism_2022_na <- thailand_tourism2022 %>%
  filter(is.na(revenue_all))
tourism_2022_na
```

We replace the name in `province_eng` with the same name in `tourism` sf dataframe.

```{r}
thailand <- thailand %>%
  mutate(province_eng = ifelse(province_eng == "Si Sa Ket", "Sisaket", 
                   ifelse(province_eng == "Buri Ram", "Buriram",
                    ifelse(province_eng == "Lop Buri", "Lopburi",
                    ifelse(province_eng == "Chai Nat", "Chainat",
                    ifelse(province_eng == "Chon Buri", "Chonburi",
                    ifelse(province_eng == "Prachin Buri", "Prachinburi",
                    ifelse(province_eng == "Nong Bua Lam Phu", "Nong Bua Lamphu",
                    ifelse(province_eng == "Phangnga", "Phang Nga",
                          province_eng)))))))))
```

Perform the join again and check for records with NA value

```{r}
thailand_tourism2022 <- left_join(thailand, tourism_2022)
# Check for records with NA value
tourism_2022_na <- thailand_tourism2022 %>%
  filter(is.na(revenue_all))
tourism_2022_na
```

All the provinces are mapped properly between the 2 dataframes now.

## Tourism Indicators layer in space-time

```{r}
thailand_st = spacetime(tourism, thailand,
                        .loc_col = "province_eng",
                        .time_col = "date")
```

Next `is_spacetime_cube()` of sfdep package is used to verify if the conversion is successful.

```{r}
is_spacetime_cube(thailand_st)
```

# Geovisualization

Create choropleth maps of the 5 variables.

```{r}
no_tourist <- tm_shape(thailand_tourism2022) +
  tm_fill("no_tourist_all",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Number of Tourists by Province Map",
            legend.position = c("left","bottom"))

revenue <- tm_shape(thailand_tourism2022) +
  tm_fill("revenue_all",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue by Province Map",
            legend.position = c("left","bottom"))

ratio_stay <- tm_shape(thailand_tourism2022) +
  tm_fill("avg_ratio_stay",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Average ratio of tourist stay over-night map",
            legend.position = c("left","bottom"))

rev_per_tourist <- tm_shape(thailand_tourism2022) +
  tm_fill("revenue_per_tourist",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue per Tourist by Province Map")

rev_per_thai_tourist <- tm_shape(thailand_tourism2022) +
  tm_fill("revenue_per_thai_tourist",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Revenue per Thai Tourist by Province Map")
```

```{r}
#| warning: false
tmap_arrange(no_tourist, revenue, ratio_stay,
             ncol=2, nrow = 2)
```

We can observe some differences in the distribution of number of tourist, revenue and tourist stay ratios across regions of Thailand.

plot revenue per tourist variables

```{r}
#| warning: false
tmap_arrange(rev_per_tourist, rev_per_thai_tourist,
             ncol=2, nrow = 1)
```

We can observe the relative distribution of revenue per tourist and revenue per Thai tourist across provinces of Thailand are largely similar.

# Global Measures of Spatial Association

Statistics test to confirm if the variables distribution are spatially dependent.

First we derive Queen's contiguity weights using sfdep package.

```{r}
wm_q <- thailand_tourism2022 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W", allow_zero = TRUE),
         .before = 1) 
```

Perform Global Moran's I permutation test

```{r}
global_moran_perm(wm_q$no_tourist_all,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```
