---
title: "Hands-on Exercise 4: Spatial Weights and Applications"
author: "Nguyen Bao Thu Phuong"
date: "10 September 2024" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Overview

In this exercise, you explore how to compute spatial weights in R using below functions:

-   Import geospatial data using functions from the **sf** package.

-   Import a CSV file using the **readr** package.

-   Perform relational joins with functions from the **dplyr** package.

-   Compute spatial weights using the **spdep** package.

-   Calculate spatially lagged variables with functions from the **spdep** package.

# Study Area and Data

In this exercise, two data sets will be used:

-   **Hunan county boundary layer**: A geospatial data set in ESRI shapefile format.

-   **Hunan_2012.csv**: A CSV file containing selected local development indicators for Hunan in 2012.

# Import R Package

*p_load()* of pacman package is used to install and load **spdep**, **sf**, **tmap** and **tidyverse** packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, purrr)
```

# Import Geospatial and Aspatial data

::: panel-tabset
## Import shapefile into R environment

[*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package is used to import Hunan shapefile into R. The imported shapefile will be **simple features** object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## Import csv file into R environment

Next, *read_csv()* of **readr** package is used to import *Hunan_2012.csv* into R. The output is a R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```
:::

## Perform Relational Join

The following code chunk uses *left_join()* from the dplyr package to update the attribute table of `hunan`’s SpatialPolygonsDataFrame by merging it with the attribute fields from the `hunan2012` dataframe.

```{r}
hunan <- left_join(hunan,hunan2012, by = "County" ) %>%
  select(1:4, 7, 15)
```

# Visualize Regional Development Indicator

Noext we plot a basemap and a choropleth map showing the distribution of GDPPC 2012 using `qtm()` of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Compute Contiguity Spatial Weights

In this section, we explore how to use the `poly2nb()` function from **spdep** package to compute contiguity weight matrices for the study area. This function generates a neighbors list based on regions sharing boundaries. By default, the `queen` argument is set to TRUE, meaning it applies the Queen contiguity criterion return a list of first order neighbours.

## Compute (QUEEN) contiguity based neighbours

The code chunk below computes Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report indicates there are 88 area units in Hunan. The most connected unit has 11 neighbors, while two units have only one neighbor each.

For each polygon in our object, `wm_q` lists all neighboring polygons. To view the neighbors for the first polygon, use the following command:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The output numbers represent the polygon IDs in the `hunan` SpatialPolygonsDataFrame.

We can use the following code to retrieve the county name for Polygon ID 1:

```{r}
hunan$County[1]
```

The output shows that Polygon ID 1 corresponds to Anxiang County.

To display the county names of the five neighboring polygons, we can use the following code.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five countries using the below code chunk.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The above output reveals that GDP per capita (GDPPC) of the five nearest neighbors based on Queen's method are: 20,981; 34,592; 24,473; 21,311; and 22,879 respectively.

We can use `str()` to view the complete weight matrix.

```{r}
str(wm_q)
```

[Note]{.underline}: The output might cut across several pages. Save the trees if you are going to print out the report.

## Create (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary output shows that there are 88 area units in Hunan. The most connected unit has 10 neighbours while there are 2 area units with only 1 neighbour.

## Visualize contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. Since we are working with polygons, the centroids will serve as points for the connectivity graph. We will calculate these centroids and extract the latitude and longitude coordinates before moving on to the graphs.

We will use the **sf** package to calculate centroids and **purrr** package's `map_dbl` function to extract the coordinates. Here's the breakdown:

-   **Calculate Centroids**: Use `st_centroid()` from the **sf** package to calculate the centroids of polygons.

-   **Extract Coordinates**: Apply the `st_centroid()` function over the geometry column to get the longitude and latitude values.

-   **Mapping Function**: Use the `map_dbl()` function from the **purrr** package to extract only the first (longitude) and second (latitude) values of each centroid. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the `geometry` column of `hunan`. Our function will be `st_centroid()`.

To extract the longitude values from the centroids of polygons, we apply the `st_centroid()` function to the `geometry` column and access the first value (longitude) of each centroid. This is achieved using double bracket notation `[[]]` and `1` as below:

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

The same can be done for latitude with one key difference: we access the second value per each centroid with `[[2]]`.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Next we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

### Plot Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plot Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plot both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Compute distance based neighbours

In this section, we explore how to use `dnearneigh()` from the **spdep** package to create distance-based weight matrices. This function finds neighbors within a given Euclidian distance range, using the `d1=` and `d2=` arguments to set the lower and upper bounds of the distance band. If your coordinates are in geographic (unprojected) format, you can set `longlat=TRUE` to calculate great-circle distances in kilometers, assuming the WGS84 ellipsoid.

## Determine the cut-off distance

The below steps are used to determine the upper limit for a distance band:

1.  Use `knearneigh()` from **spdep** to get a matrix with the indices of points belonging to the set of k-nearest neighbors.

2.  Convert the returned `knn` object to a neighbors list of class nb with a list of integer vectors containing neighbor region's ids using `knn2nb()`.

3.  Calculate the distances between neighbors with `nbdists()`. This function returns the result in the units of the coordinates if the coordinates are projected, in kilometer otherwise.

4.  Remove the list structure with `unlist()`.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary output shows that the largest first nearest neighbour distance is 61.79 km. Using this as the upper threshold gives certainty that all units will have at least one neighbour.

## Compute fixed distance weight matrix

Next we compute the distance weight matrix using `dnearneigh()` as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The Average number of links: 3.681818 means on average, each region has about 3.68 neighboring regions (connections) within the distance range from 0 to 62 km. If this number is small, it suggests sparse connections between regions, whereas a larger number would indicate more densely connected regions.

Next, we use `str()` to display the content of `wm_d62` weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to use a combination of the `table()` and `card()`functionof **spdep**.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### Plot fixed distance weight matrix

We plot the distance weight matrix by using below code chunk.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines indicate 1st nearest neighbor links, while the black lines represent neighbors within 62 km. Alternatively, both can be plotted side by side using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## Compute adaptive distance weight matrix

In a fixed-distance weight matrix, densely populated areas (typically urban) tend to have more neighbors, while sparsely populated areas (typically rural) have fewer. More neighbors smooth the relationships. You can control the number of neighbors directly using k-nearest neighbors, allowing either asymmetric or symmetric neighbors, as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix using `str()`.

```{r}
str(knn6)
```

**Note**: each county has exactly 6 neighbours.

### Plot distance based neighbours

The weight matrix is plotted using below code chunk.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Weights based on IDW

In this section, we explore how to derive a spatial weight matrix based on the Inversed Distance method.

First, we will compute the distances between areas using [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

# Row-standardised Weights Matrix

We will assign equal weights to each neighboring polygon (`style="W"`) by using the fraction 1/(# of neighbors). This sums the weighted income values for each neighboring county. While intuitive, this approach can over- or underestimate spatial autocorrelation for polygons on the study area's edges due to fewer neighbors. We'll use `style="W"` for simplicity. Note that there are other robust options, notably `style="B"`.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The `zero.policy=TRUE` option allows handling lists with non-neighbors. Use this cautiously, as missing neighbors may go unnoticed. If `zero.policy=FALSE`, an error would occur. To view the weights of the first polygon’s eight neighbors:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a weight of 0.125, meaning R multiplies each neighbor's income by 0.125 when computing the average. Similarly, a row-standardized distance weight matrix can be derived using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# Application of Spatial Weight Matrix

In this section, we explore how to create 4 types of spatial lagged variables:

-   Spatial lag with row-standardized weights

-   Spatial lag as a sum of neighboring values

-   Spatial window average

-   Spatial window sum

::: panel-tabset
## Spatial lag with row-standardized weights

Finally, we compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Recalled from the previous section, the GDPPC of these five countries can be retrieved using below code chunk.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Calculation Spatial lag with row-standardized weights ensures that the average effect from the neighbors is comparable, regardless of how many neighbors each point has.

We can append the spatially lag GDPPC values onto `hunan` sf data frame using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

We plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial lag as a sum of neighboring values

We can calculate the spatial lag as a sum of neighboring values by assigning binary weights. This involves revisiting the neighbors list and applying a function to assign binary weights. Using the `glist` argument in the `nb2listw()` function, we can explicitly assign these weights.

First, we use `lapply()` to assign a value of 1 for each neighbor. This function applies a specified operation across each element of the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw` to compute a lag variable from our weight and `GDPPC`.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Let us examine the result using the code chunk below.

```{r}
lag_sum
```

The Spatial lag as a sum of neighboring values represents the cumulative influence of all neighboring locations on the variable at a specific location. It quantifies how much the outcome at a given location is influenced by the combined values of the same variable in neighboring areas.

Next, we append the `lag_sum GDPPC` field into `hunan` sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
```

Now, We can plot both the `GDPPC` and `lag_sum GDPPC` for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element (i.e., the polygon itself). In R, we can achieve this by modifying the neighbors structure to include each diagonal element before assigning weights.

`include.self()` function from the **spdep** package is used to add the diagonal element to the neighbors list

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

**Note**: the Number of nonzero links, Percentage nonzero weights and Average number of links from `wm_qs` are 536, 6.92 and 6.09 respectively as compared to `wm_q` of 448, 5.79 and 5.09

We examine the neighbour list of area \[1\] by using the code chunk below.

```{r}
wm_qs[[1]]
```

Now \[1\] has six neighbours instead of five.

We obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We convert the lag variable listw object into a data.frame using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

**Note**: the 3rd command in the above code chunk renames the field names of the `lag_wm_q1.res` object to `NAME_3` and `lag_window_avg GDPPC`, respectively.

The following code chunk append the `lag_window_avg GDPPC` values to the `hunan` sf data frame using the `left_join()` function from the **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the `lag_gdppc` and `w_ave_gdppc` maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

**Note**: It is advisable to use the core `tmap` mapping functions for more effective visualization.

## Spatial window sum

The spatial window sum is similar to the window average, but it doesn't use row-standardized weights. To include the diagonal element in the neighbor list, use the `include.self()` function from the spdep package.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Now \[1\] has six neighbours instead of five.

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we convert the lag variable listw object into a data.frame using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

**Note**: The 2nd command line on the code chunk above renames the field names of `w_sum_gdppc.res` object into `NAME_3` and `w_sum GDPPC` respectively.

The following code chunk append `w_sum GDPPC` values to `hunan` sf data.frame using `left_join()` of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the `lag_sum GDPPC` and `w_sum_gdppc` maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

**Note**: It is advisable to use the core `tmap` mapping functions for more effective visualization.
:::
