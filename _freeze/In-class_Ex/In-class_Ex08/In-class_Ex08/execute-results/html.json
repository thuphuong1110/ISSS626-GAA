{
  "hash": "0b5250db755e99a58f9eda5c1297bbf9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 8: Geographically Weighted Predictive Models\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"21 October 2024\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Install and Load R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, Metrics, tidyverse, knitr,kableExtra)\n```\n:::\n\n\n# Prepare the Data\n\n::: panel-tabset\n## Data Import\n\nThe below code chunk reads data from rds file and store in `mdata` as simple feature dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n\n## Data Sampling\n\nCalibrating predictive models can be computationally intensive, especially with methods like random forests. For faster prototyping, a 10% random sample of the data will be selected using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n\n## Check for Overlapping Points\n\nThe code chunk below checks if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\n## Spatial Jitter\n\nThe code code chunk below uses `st_jitter()` of **sf** package to move the point features by 5m to avoid overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount = 5)\n```\n:::\n\n:::\n\n## Data Sampling\n\nThe data is split into train and test data sets with with size of 65% and 35% respectively using `initial_split()` of **rsample** package. **rsample** is one of the package from **tidymodels**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(HDB_sample, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\nWe write the data to rds format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/train_data.rds\")\nwrite_rds(test_data, \"data/test_data.rds\")\n```\n:::\n\n\nRead the data from rds format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/train_data.rds\")\ntest_data <- read_rds(\"data/test_data.rds\")\n```\n:::\n\n\n## Multicollinearity Check\n\nIt is a good practice to use correlation matrix to examine if there is sign of multicollinearity before loading the predictors into a predictive model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo = mdata |>\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[,2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-9-1.png){width=1152}\n:::\n:::\n\n\n# Build a non-sptial multiple linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.860       RMSE                    61034.447 \nR-Squared                   0.739       MSE                3783410059.812 \nAdj. R-Squared              0.735       Coef. Var                  14.315 \nPred R-Squared              0.730       AIC                     24286.358 \nMAE                     46102.421       SBC                     24364.477 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                    ANOVA                                     \n-----------------------------------------------------------------------------\n                    Sum of                                                   \n                   Squares         DF       Mean Square       F         Sig. \n-----------------------------------------------------------------------------\nRegression    1.027895e+13         14       7.34211e+11    194.061    0.0000 \nResidual      3.632074e+12        960    3783410059.812                      \nTotal         1.391103e+13        974                                        \n-----------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    114172.894     34962.309                   3.266    0.001     45561.525    182784.264 \n          floor_area_sqm      2777.543       296.467        0.166      9.369    0.000      2195.745      3359.341 \n            storey_order     12752.368      1088.198        0.213     11.719    0.000     10616.846     14887.890 \n    remaining_lease_mths       349.527        14.910        0.449     23.442    0.000       320.267       378.788 \n                PROX_CBD    -16227.901       641.722       -0.572    -25.288    0.000    -17487.240    -14968.562 \n        PROX_ELDERLYCARE    -10941.600      3272.302       -0.059     -3.344    0.001    -17363.291     -4519.910 \n             PROX_HAWKER    -19593.066      4079.929       -0.086     -4.802    0.000    -27599.675    -11586.457 \n                PROX_MRT    -39890.178      5465.548       -0.132     -7.298    0.000    -50615.979    -29164.377 \n               PROX_PARK    -15142.071      4697.197       -0.058     -3.224    0.001    -24360.030     -5924.112 \n               PROX_MALL    -14453.472      6518.983       -0.044     -2.217    0.027    -27246.573     -1660.371 \n        PROX_SUPERMARKET    -17056.095     13703.685       -0.023     -1.245    0.214    -43948.730      9836.540 \nWITHIN_350M_KINDERGARTEN      8899.141      2066.838        0.076      4.306    0.000      4843.100     12955.183 \n   WITHIN_350M_CHILDCARE     -1558.562      1195.890       -0.025     -1.303    0.193     -3905.422       788.297 \n         WITHIN_350M_BUS      -540.341       747.336       -0.013     -0.723    0.470     -2006.942       926.261 \n       WITHIN_1KM_PRISCH    -10529.555      1579.195       -0.135     -6.668    0.000    -13628.627     -7430.483 \n------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n## Multicollinearity check with VIF\n\n### VIF Table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvif = performance::check_collinearity(price_mlr)\nkable(vif,\n      caption = \"Variance Inflator Factor (VIF) Results\") |>\n  kable_styling(font_size = 10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 10px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflator Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.151407 </td>\n   <td style=\"text-align:right;\"> 1.089081 </td>\n   <td style=\"text-align:right;\"> 1.257341 </td>\n   <td style=\"text-align:right;\"> 1.073036 </td>\n   <td style=\"text-align:right;\"> 0.8685025 </td>\n   <td style=\"text-align:right;\"> 0.7953289 </td>\n   <td style=\"text-align:right;\"> 0.9182057 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.214342 </td>\n   <td style=\"text-align:right;\"> 1.142122 </td>\n   <td style=\"text-align:right;\"> 1.323261 </td>\n   <td style=\"text-align:right;\"> 1.101972 </td>\n   <td style=\"text-align:right;\"> 0.8234911 </td>\n   <td style=\"text-align:right;\"> 0.7557088 </td>\n   <td style=\"text-align:right;\"> 0.8755630 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.350011 </td>\n   <td style=\"text-align:right;\"> 1.259448 </td>\n   <td style=\"text-align:right;\"> 1.472187 </td>\n   <td style=\"text-align:right;\"> 1.161900 </td>\n   <td style=\"text-align:right;\"> 0.7407345 </td>\n   <td style=\"text-align:right;\"> 0.6792616 </td>\n   <td style=\"text-align:right;\"> 0.7939987 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.881970 </td>\n   <td style=\"text-align:right;\"> 1.727036 </td>\n   <td style=\"text-align:right;\"> 2.069921 </td>\n   <td style=\"text-align:right;\"> 1.371849 </td>\n   <td style=\"text-align:right;\"> 0.5313581 </td>\n   <td style=\"text-align:right;\"> 0.4831102 </td>\n   <td style=\"text-align:right;\"> 0.5790269 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.143973 </td>\n   <td style=\"text-align:right;\"> 1.082945 </td>\n   <td style=\"text-align:right;\"> 1.249905 </td>\n   <td style=\"text-align:right;\"> 1.069567 </td>\n   <td style=\"text-align:right;\"> 0.8741464 </td>\n   <td style=\"text-align:right;\"> 0.8000608 </td>\n   <td style=\"text-align:right;\"> 0.9234082 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.185396 </td>\n   <td style=\"text-align:right;\"> 1.117532 </td>\n   <td style=\"text-align:right;\"> 1.292447 </td>\n   <td style=\"text-align:right;\"> 1.088759 </td>\n   <td style=\"text-align:right;\"> 0.8435996 </td>\n   <td style=\"text-align:right;\"> 0.7737259 </td>\n   <td style=\"text-align:right;\"> 0.8948292 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.206165 </td>\n   <td style=\"text-align:right;\"> 1.135149 </td>\n   <td style=\"text-align:right;\"> 1.314495 </td>\n   <td style=\"text-align:right;\"> 1.098255 </td>\n   <td style=\"text-align:right;\"> 0.8290742 </td>\n   <td style=\"text-align:right;\"> 0.7607483 </td>\n   <td style=\"text-align:right;\"> 0.8809413 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.193096 </td>\n   <td style=\"text-align:right;\"> 1.124046 </td>\n   <td style=\"text-align:right;\"> 1.300581 </td>\n   <td style=\"text-align:right;\"> 1.092289 </td>\n   <td style=\"text-align:right;\"> 0.8381557 </td>\n   <td style=\"text-align:right;\"> 0.7688872 </td>\n   <td style=\"text-align:right;\"> 0.8896430 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.436647 </td>\n   <td style=\"text-align:right;\"> 1.335177 </td>\n   <td style=\"text-align:right;\"> 1.568835 </td>\n   <td style=\"text-align:right;\"> 1.198602 </td>\n   <td style=\"text-align:right;\"> 0.6960652 </td>\n   <td style=\"text-align:right;\"> 0.6374157 </td>\n   <td style=\"text-align:right;\"> 0.7489641 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.222273 </td>\n   <td style=\"text-align:right;\"> 1.148901 </td>\n   <td style=\"text-align:right;\"> 1.331800 </td>\n   <td style=\"text-align:right;\"> 1.105565 </td>\n   <td style=\"text-align:right;\"> 0.8181476 </td>\n   <td style=\"text-align:right;\"> 0.7508635 </td>\n   <td style=\"text-align:right;\"> 0.8703968 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.132339 </td>\n   <td style=\"text-align:right;\"> 1.073426 </td>\n   <td style=\"text-align:right;\"> 1.238522 </td>\n   <td style=\"text-align:right;\"> 1.064114 </td>\n   <td style=\"text-align:right;\"> 0.8831275 </td>\n   <td style=\"text-align:right;\"> 0.8074138 </td>\n   <td style=\"text-align:right;\"> 0.9315967 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.387186 </td>\n   <td style=\"text-align:right;\"> 1.291898 </td>\n   <td style=\"text-align:right;\"> 1.513579 </td>\n   <td style=\"text-align:right;\"> 1.177788 </td>\n   <td style=\"text-align:right;\"> 0.7208840 </td>\n   <td style=\"text-align:right;\"> 0.6606856 </td>\n   <td style=\"text-align:right;\"> 0.7740549 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.192068 </td>\n   <td style=\"text-align:right;\"> 1.123176 </td>\n   <td style=\"text-align:right;\"> 1.299493 </td>\n   <td style=\"text-align:right;\"> 1.091819 </td>\n   <td style=\"text-align:right;\"> 0.8388780 </td>\n   <td style=\"text-align:right;\"> 0.7695311 </td>\n   <td style=\"text-align:right;\"> 0.8903325 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.510863 </td>\n   <td style=\"text-align:right;\"> 1.400273 </td>\n   <td style=\"text-align:right;\"> 1.652008 </td>\n   <td style=\"text-align:right;\"> 1.229172 </td>\n   <td style=\"text-align:right;\"> 0.6618734 </td>\n   <td style=\"text-align:right;\"> 0.6053239 </td>\n   <td style=\"text-align:right;\"> 0.7141467 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### VIF Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vif) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable `Component` is not in your data frame :/\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n# Predective Modelling with GWR\n\n## Compute adaptive bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 610 CV score: 3.396927e+12 \nAdaptive bandwidth: 385 CV score: 3.174206e+12 \nAdaptive bandwidth: 245 CV score: 2.869e+12 \nAdaptive bandwidth: 159 CV score: 2.565794e+12 \nAdaptive bandwidth: 105 CV score: 2.214738e+12 \nAdaptive bandwidth: 72 CV score: 1.950172e+12 \nAdaptive bandwidth: 51 CV score: 1.778792e+12 \nAdaptive bandwidth: 39 CV score: 1.661084e+12 \nAdaptive bandwidth: 30 CV score: 1.568725e+12 \nAdaptive bandwidth: 26 CV score: 1.548313e+12 \nAdaptive bandwidth: 22 CV score: 1.538462e+12 \nAdaptive bandwidth: 21 CV score: 1.523028e+12 \nAdaptive bandwidth: 19 CV score: 1.512568e+12 \nAdaptive bandwidth: 19 CV score: 1.512568e+12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\nThe result shows that 19 neighbour points is the optimal adaptive bandwidth to be used for this data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive, \"data/bw_adaptive.rds\")\n```\n:::\n\n\n## Construct the adaptive bandwidth gwr model\n\nFirst we call the save bandwidth using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/bw_adaptive.rds\")\n```\n:::\n\n\nNow, we go ahead to calibrate the gwr-based hedonic pricing model using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\nThe model result is as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-31 20:47:02.273628 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 975\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-167207  -37824    -238   34255  225584 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              114172.89   34962.31   3.266 0.001131 ** \n   floor_area_sqm             2777.54     296.47   9.369  < 2e-16 ***\n   storey_order              12752.37    1088.20  11.719  < 2e-16 ***\n   remaining_lease_mths        349.53      14.91  23.442  < 2e-16 ***\n   PROX_CBD                 -16227.90     641.72 -25.288  < 2e-16 ***\n   PROX_ELDERLYCARE         -10941.60    3272.30  -3.344 0.000859 ***\n   PROX_HAWKER              -19593.07    4079.93  -4.802 1.82e-06 ***\n   PROX_MRT                 -39890.18    5465.55  -7.298 6.10e-13 ***\n   PROX_PARK                -15142.07    4697.20  -3.224 0.001308 ** \n   PROX_MALL                -14453.47    6518.98  -2.217 0.026847 *  \n   PROX_SUPERMARKET         -17056.10   13703.69  -1.245 0.213569    \n   WITHIN_350M_KINDERGARTEN   8899.14    2066.84   4.306 1.84e-05 ***\n   WITHIN_350M_CHILDCARE     -1558.56    1195.89  -1.303 0.192796    \n   WITHIN_350M_BUS            -540.34     747.34  -0.723 0.469842    \n   WITHIN_1KM_PRISCH        -10529.56    1579.19  -6.668 4.38e-11 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61510 on 960 degrees of freedom\n   Multiple R-squared: 0.7389\n   Adjusted R-squared: 0.7351 \n   F-statistic: 194.1 on 14 and 960 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.632074e+12\n   Sigma(hat): 61097.14\n   AIC:  24286.36\n   AICc:  24286.93\n   BIC:  23499.6\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 19 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -1863475.57  -212514.91     5601.15   245291.24\n   floor_area_sqm              -4400.58     1177.77     2045.27     3344.75\n   storey_order                 3138.23     8074.15    10578.11    13835.86\n   remaining_lease_mths         -567.87      346.52      426.05      503.37\n   PROX_CBD                   -81354.37   -23497.13   -10946.60    -1279.01\n   PROX_ELDERLYCARE          -262405.86   -23077.81    -5490.80    17533.13\n   PROX_HAWKER               -225301.62   -36521.56   -10558.54    20145.23\n   PROX_MRT                  -305062.32   -90849.20   -55778.06   -20478.31\n   PROX_PARK                 -257739.81   -32859.80   -15051.91     8565.74\n   PROX_MALL                 -274223.21   -36280.73     3682.06    49856.21\n   PROX_SUPERMARKET          -176209.93   -45157.90    -5420.26    30645.48\n   WITHIN_350M_KINDERGARTEN   -43330.60    -9582.09    -2482.36     5469.75\n   WITHIN_350M_CHILDCARE      -15807.60    -2525.30     1294.72     3234.90\n   WITHIN_350M_BUS             -9134.82    -1825.47      331.29     2176.76\n   WITHIN_1KM_PRISCH          -54170.21    -3571.71      512.00     4646.67\n                                  Max.\n   Intercept                1668279.80\n   floor_area_sqm              7814.05\n   storey_order               26308.30\n   remaining_lease_mths         716.27\n   PROX_CBD                  131063.39\n   PROX_ELDERLYCARE          179454.03\n   PROX_HAWKER               146976.72\n   PROX_MRT                  126271.79\n   PROX_PARK                  96580.81\n   PROX_MALL                 342520.41\n   PROX_SUPERMARKET          177471.19\n   WITHIN_350M_KINDERGARTEN   40409.87\n   WITHIN_350M_CHILDCARE      15476.12\n   WITHIN_350M_BUS            11155.18\n   WITHIN_1KM_PRISCH          32922.16\n   ************************Diagnostic information*************************\n   Number of data points: 975 \n   Effective number of parameters (2trace(S) - trace(S'S)): 409.2118 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 565.7882 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 23520.23 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 22826.57 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 23824.92 \n   Residual sum of squares: 595314539646 \n   R-square value:  0.9572056 \n   Adjusted R-square value:  0.9261993 \n\n   ***********************************************************************\n   Program stops at: 2024-10-31 20:47:02.609367 \n```\n\n\n:::\n:::\n\n\nNext the model is saved in rds format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive, \"data/gwr_adaptive.rds\")\n```\n:::\n\n\n## Retrieve gwr output object\n\nThe code chunk below retrieves the save gwr model object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- read_rds(\"data/gwr_adaptive.rds\")\n```\n:::\n\n\nThe model output can be displayed using below code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n:::\n\n\n## Predict with Test Data\n\n### Test Data bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 332 CV score: 1.808831e+12 \nAdaptive bandwidth: 213 CV score: 1.680658e+12 \nAdaptive bandwidth: 139 CV score: 1.487342e+12 \nAdaptive bandwidth: 93 CV score: 1.327673e+12 \nAdaptive bandwidth: 65 CV score: 1.150371e+12 \nAdaptive bandwidth: 47 CV score: 1.023446e+12 \nAdaptive bandwidth: 36 CV score: 901695754647 \nAdaptive bandwidth: 29 CV score: 869852523865 \nAdaptive bandwidth: 25 CV score: 863464583366 \nAdaptive bandwidth: 22 CV score: 855145692336 \nAdaptive bandwidth: 20 CV score: 8.39443e+11 \nAdaptive bandwidth: 19 CV score: 8.35764e+11 \nAdaptive bandwidth: 18 CV score: 837955316896 \nAdaptive bandwidth: 19 CV score: 8.35764e+11 \n```\n\n\n:::\n:::\n\n\n### Predict with test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data, \n                        predictdata = test_data, \n                        bw=bw_adaptive, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n\n# Predictive Modelling: SpatialML methods\n\n## Prepare Coordinates data\n\nThe code chunk below extracts the x,y coordinates of the full, training and test data sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\nWe write all the output into rds for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"data/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/coords_test.rds\" )\n```\n:::\n\n\n## Drop Geometry field\n\nFirst, we drop the geometry column of the sf data.frame using `st_drop_geometry()` of sf package as `ranger()` function require tible dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n## Calibrate Random Forest model\n\nWe calibrate a model to predict HDB resale price using random forest function of **ranger** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n```\n:::\n\n\nModel output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      975 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2313484641 \nR squared (OOB):                  0.8380181 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf, \"data/rf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- read_rds(\"data/rf.rds\")\n```\n:::\n\n\n## Calibrate with grf()\n\nIn this section, we explore how to calibrate a model to predict HDB resale price by using `grf()` of **SpatialML** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nNumber of Observations: 975\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of Independent Variables: 14\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nKernel: Adaptive\nNeightbours: 55\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Global ML Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      975 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2112956167 \nR squared (OOB):                  0.8520584 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nImportance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm             storey_order     remaining_lease_mths \n            7.014621e+11             1.472727e+12             2.368021e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.516177e+12             5.035574e+11             6.351735e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            7.926518e+11             5.292538e+11             4.432979e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.705109e+11             1.128608e+11             2.219549e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.189088e+11             7.361648e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean Square Error (Not OOB): 404387373.973\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (Not OOB) %: 97.166\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (Not OOB): 19352.437\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (Not OOB): 19352.937\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Local Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals OOB:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-244730.6  -21894.3   -1486.0    -147.8   20203.9  272305.6 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals Predicted (Not OOB):\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-39989.0  -3523.0   -235.4   -115.9   2820.4  49785.4 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nLocal Variable Importance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                Min          Max         Mean          StD\nfloor_area_sqm            696919686 171359696724  24585231938  31054898436\nstorey_order              556286378 336284813866  29111637645  53940346777\nremaining_lease_mths     5015621769 662431581470 102796953916 142322738014\nPROX_CBD                  969645111 333574144319  32398603460  51529843423\nPROX_ELDERLYCARE         1885669191 133808777431  23022318538  24756166362\nPROX_HAWKER              1054538821 197323237741  21225513496  25502913522\nPROX_MRT                 1230399011 268171063212  28859762449  46296774533\nPROX_PARK                1001025148 178811098249  19686271129  20914300056\nPROX_MALL                1463394653 260061426721  27018175100  39644748521\nPROX_SUPERMARKET          919432669 168565348890  19481442490  27618922136\nWITHIN_350M_KINDERGARTEN  190947575  43671284878   5500713976   6598985175\nWITHIN_350M_CHILDCARE     386573451 178795505651  19080750625  34710094711\nWITHIN_350M_BUS           641999519 139202195056   8908180301  11083301899\nWITHIN_1KM_PRISCH         232944521  62733693084   6845346956   8828863011\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean squared error (OOB): 2109345256.436\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (OOB) %: 85.216\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (OOB): 20962.902\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (OOB): 20963.403\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMean squared error Predicted (Not OOB): 52672246.874\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared Predicted (Not OOB) %: 99.631\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC Predicted (Not OOB): 17365.109\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc Predicted (Not OOB): 17365.61\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCalculation time (in seconds): 29.6244\n```\n\n\n:::\n:::\n\n\nThe model output is saved into rds format using the below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive, \"data/gwRF_adaptive.rds\")\n```\n:::\n\n\nThe below code chunk retrieves the saved model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- read_rds(\"data/gwRF_adaptive.rds\")\n```\n:::\n\n\n## Predict using the test data\n\n### Prepare the test data\n\nThe code chunk combines the test data with its corresponding coordinates data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n### Predict with the test data\n\nNext, `predict.grf()` of **spatialML** package is used to predict the resale value using the test data and `gwRF_adaptive` model calibrated earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data_nogeom, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n### Convert the predicting output into a data frame\n\nThe output of the `predict.grf()` is a vector of predicted values. It is more efficient to convert it into a data frame for further visualisation and analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df <- as.data.frame(gwRF_pred)\n```\n:::\n\n\nNext `cbind()` is used to append the predicted values onto `test_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- cbind(test_data, \n                        GRF_pred_df)\n```\n:::\n\n\n## Visualiza the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_pred,\n       aes(x = gwRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}