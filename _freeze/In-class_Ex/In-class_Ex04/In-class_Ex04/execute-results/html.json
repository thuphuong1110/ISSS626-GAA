{
  "hash": "0f1bddba72509c5e946a4eba945797de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 4: Geographically Weighted Summary Statistics - GWmodel\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"16 September 2024\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Import R package\n\nImport the relevant R package using `p_load()` of **pacman** package as in below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(GWmodel, sf, spdep, tmap, tidyverse, knitr, ggstatsplot)\n```\n:::\n\n\n# Prepare the data\n\nFor this exercise, the `hunan` shapefile and `hunan_2012` data file will be used. Data is loaded into R environment using below code chunks\n\n::: panel-tabset\n## Hunan Shapefile\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## Hunan 2012 Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Join Hunan and Hunan 2012 data\n\nThe following code chunk uses `left_join()` from the **dplyr** package to update the attribute table of `hunan`’s SpatialPolygonsDataFrame by merging it with the attribute fields from the `hunan2012` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan,hunan2012, by = \"County\" ) %>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n:::\n\n:::\n\n# Visualize GDPPC geographic distribution\n\nWe plot the boundaries of Hunan's province (`basemap`) and a choropleth map showing the geographic distribution of GDPPC in Hunan (`gdppc`)\\_ using below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n# Convert to SpatialPolygonDataFrame\n\nAs GWmodel is built on sp object, we need to convert the sf object into sp object using below code chunk. In sp object, a list object is used to store the polygon coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp = as_Spatial(hunan_sf)\n```\n:::\n\n\n# Geographically Weighted summary statistics with adaptive bandwidth\n\n## Determine adaptive bandwidth\n\n::: panel-tabset\n\n### Cross-validation\n\nCross validation of different bandwidth values is calculated using below code chunk, using approach = CV, longlat = T (to indicate the use of coordinates in degree)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV = bw.gwr(GDPPC ~ 1, \n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n### AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC = bw.gwr(GDPPC ~ 1, \n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n:::\n\n## Determine fixed bandwidth\n\n### Cross Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed = bw.gwr(GDPPC ~ 1, \n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n### AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed = bw.gwr(GDPPC ~ 1, \n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n\n## Compute geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat = gwss(data = hunan_sp,\n              vars = \"GDPPC\",\n              bw = bw_AIC,\n              kernel = \"bisquare\",\n              adaptive = TRUE,\n              longlat = T)\n```\n:::\n\n\nTaking a look at the `gwstat` gwss object:\n\n-   GDPPC_LM: the local means of 22 neighbours calculated for all the points\n\n-   GDPPC_LVar: the local variance of 22 neighbours calculated for all the points\n\n## Prepare the output data\n\nThe code chunk below is used to extract `SDF` data table from gwss object (output from `gwss()`). It is converted into data.frame using `as.data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df = as.data.frame(gwstat$SDF)\n```\n:::\n\n\nNext `cbind()` is used to append the newly derived data.frame onto `hunan_sf` sf data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat = cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n# Visualize geographically weighted summary statistics\n\nWe plot the distribution of geographically weighted mean using below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of Geographically Weighted Mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size = 0.5,\n            legend.height = 0.5,\n            legend.width = 1,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Geographically Weighted Correlation with Adaptive Bandwidth\n\nThe below chart can be used to answer the business question: Is there any relationship between GDP per capita and Gross Industry Output?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = hunan2012, \n  x = Agri, \n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\", ## label for the x-axis\n  ylab = \"GDP per capita\", \n  label.var = County, \n  label.expression = Agri > 10000 & GDPPC > 50000, \n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\", \n  yfill = \"#009E73\", \n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nA geospatial analytics solution is carried out using the below steps.\n\nFirst we determine the bandwidth\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.gwr(GDPPC ~ GIO, \n             data = hunan_sp, \n             approach = \"AICc\", \n             adaptive = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1870.235 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1870.852 \nAdaptive bandwidth (number of nearest neighbours): 72 AICc value: 1869.744 \nAdaptive bandwidth (number of nearest neighbours): 78 AICc value: 1869.713 \nAdaptive bandwidth (number of nearest neighbours): 82 AICc value: 1869.604 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \nAdaptive bandwidth (number of nearest neighbours): 86 AICc value: 1869.647 \nAdaptive bandwidth (number of nearest neighbours): 83 AICc value: 1869.567 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \n```\n\n\n:::\n:::\n\nNext we compute the correlation\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstats <- gwss(hunan_sp, \n                vars = c(\"GDPPC\", \"GIO\"), \n                bw = bw,\n                kernel = \"bisquare\",\n                adaptive = TRUE, \n                longlat = T)\n```\n:::\n\n\nFinally, the code chunk below is used to extract SDF data table from gwss object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstats$SDF) %>%\n  select(c(12,13)) %>%\n  rename(gwCorr = Corr_GDPPC.GIO,\n         gwSpearman = Spearman_rho_GDPPC.GIO)\n```\n:::\n\n\nNext, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_Corr <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n# Visualize Local Correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_Corr) +\n  tm_fill(c(\"gwCorr\",\"gwSpearman\"),\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(title = c(\"Local Correlation Coefficient\",\"Local Spearman Rho\"),\n            title.position = c(\"left\",\"top\"),\n            title.size = 1.0,\n            legend.text.size = 0.5,\n            legend.height = 0.7, \n            legend.width = 0.7,\n            legend.position = c(\"left\",\"bottom\"),\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}