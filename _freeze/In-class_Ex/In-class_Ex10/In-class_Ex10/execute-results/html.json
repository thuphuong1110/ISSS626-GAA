{
  "hash": "3f8d342be2e7e20bc8f96dfc6b08894a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 10: Working with Open Goverment Data\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"11 November 2024\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Overview\n\nBy the end of this exercise, you will be able to:\n\n-   Prepare REALIS portal data for geocoding\n\n-   Geocode using the SLA OneMap API\n\n-   Convert geocoded transaction data into an sf point feature data frame\n\n-   Wrangle sf point features to prevent overlapping points\n\n# Install R Packages\n\nFirst we install relevant R packages using `p_load()` function from **pacman** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n# Import the Data\n\nThe following code chunk imports multiple CSV files from a specified folder and combines them into a single tibble data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\nfile_list <- list.files(path = folder_path, \n                        pattern = \"^Residential.*\\\\.csv$\", \n                        full.names = TRUE)\n\nrealis_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\n# Data Wrangling\n\nThe code chunk below converts values in the `Sale Date` field from character to date format and extracts records for resale and condominium transactions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>%\n  mutate(`Sale Date` = dmy(`Sale Date`)) %>%\n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\n## Geocoding\n\nFirst we extract a list of unique postal codes from `condo_resale`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode_list <- unique(condo_resale$`Postal Code`)\n```\n:::\n\n\nThe below code chunks reads in `postcode` list and return the respective address as scraped from OneMap API.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode_list){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n\n## Tidy Field Name\n\nThe below code chunk shorten the field names and select relevant columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(c(6:8)) %>%\n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n\nWe write the result to rds file for further use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(found,\"data/rds/found_add.rds\")\n```\n:::\n\n\nThe below code chunk read the obtained addresses from rds file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound = read_rds(\"data/rds/found_add.rds\")\n```\n:::\n\n\n## Convert to Point Feature Data Frame\n\nThe below code chunk left joins `condo_resale` with `found`. The output is saved in `condo_resale_geocoded`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_geocoded = left_join(\n  condo_resale, found, \n  by = c('Postal Code' = 'POSTAL'))\n```\n:::\n\n\nNext we convert `condo_resale_geocoded` to sf dataframe using the below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded, \n                            coords = c(\"XCOORD\",\n                                       \"YCOORD\"),\n                            crs=3414)\n```\n:::\n\n\n## Cleaning Geospatial Data\n\nThe below code chunk below checks if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n\nsum(overlapping_points$overlap == TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5301\n```\n\n\n:::\n:::\n\n\nThe output shows that there are 5301 overlapping points. This is expected to happen as flats in the same block will have the same postal code, which indicate same address and coordinates.\n\nThe below code chunk uses `st_jitter()` function of **sf** package to move the point features by 2m to avoid overlapping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>%\n  st_jitter(amount = 2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}