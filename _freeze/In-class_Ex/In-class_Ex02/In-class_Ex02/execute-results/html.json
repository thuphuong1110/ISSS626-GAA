{
  "hash": "0474e7b3a79f619aed6f9c5c1190bc3c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"2 September 2024\" \ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Install R packages\n\nInstall retired maptools package from [Posit Public Package Manager](https://packagemanager.posit.co/client/#/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\nImport other R packages.\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n# Create Coastal Outline\n\nWhile sp packages only allow for storing objects as is, sf packages provides other methods to manipulate geospatial data as well.\n\nWe use st_union() from sf package to create the coastal outline sf tibble data frame and plot the result as below\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in Master Plan 2014 Subzone Boundary\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\In-class_Ex\\In-class_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create Coastal outline\nsg_sf = mpsz_sf %>%\n  st_union()\nplot(sg_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n# Import Geospatial Data\n\nFirst we read in the data and perform data transformation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\In-class_Ex\\In-class_Ex02\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nchildcareSG_ppp = childcare_ppp[sg_owin]\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n```\n:::\n\n\nNext derive adaptive kernel density estimation using the *adaptive.density()* function from spatstat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\n```\n:::\n\n\n\n# Convert to ppp object\n\nFor sf objects, *as.ppp()* and *as.owin()* from **spatstat.geom** can be used, whereas *ppp()* and *owin()* is to be used for sp objects.\n\n# Kernel Density Estimation\n\nFunction from maptools can be used as in below code chunk given maptools was installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_ad <- maptools::as.SpatialGridDataFrame.im(kde_childcareSG_adaptive)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPlease note that 'maptools' will be retired during October 2023,\nplan transition at your earliest convenience (see\nhttps://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs\nfor guidance);some functionality will be moved to 'sp'.\n Checking rgeos availability: FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nspplot(gridded_kde_childcareSG_ad)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe appropriate way is to using spatstat.geom method as in below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_ad <- as(kde_childcareSG_adaptive,\"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Monte Carlo Simulation\n\nFirst we set the seed to ensure reproducibility when running Monte Carlo simulation.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n# Edge correction methods of spatstat\n\nEdge correction methods are used to handle bias when estimating spatial statistics near the boundaries of the study region. For example, if we are looking at specific study areas with in the region (Singapore boundary in this case). If the study is to be done for the whole Singapore, then edge correction is not needed.\n\nAs edge correction increase computation time, the argument can be set to `none` when edge correction is not needed.\n\n\n\n\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}