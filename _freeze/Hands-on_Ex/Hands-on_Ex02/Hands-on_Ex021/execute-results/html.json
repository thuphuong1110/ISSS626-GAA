{
  "hash": "efa830d95c4e794218f8152ec027e7ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 2.1: 1st Order Spatial Point Patterns Analysis Methods\"\nauthor: \"Nguyen Bao Thu Phuong\"\ndate: \"24 August 2024\" \ndate-modified: \"last-modified\"\ndate-format: \"DD MMMM YYYY\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Overview\n\nSpatial Point Pattern Analysis examines the pattern or distribution of points on a surface. These points can represent locations of events such as crimes, traffic accidents, or disease outbreaks, as well as business services (like coffee shops and fast food outlets) or facilities like childcare and eldercare centers.\n\nIn this hands-on exercise, we will use functions from the **spatstat** package to explore the spatial distribution of childcare centers in Singapore.\n\nThe key questions we aim to answer are:\n\n1.  Are the childcare centers in Singapore randomly distributed across the country?\n2.  If not, where are the areas with a higher concentration of childcare centers?\n\n# Data Acquisition\n\nThe datasets required for this exercise are extracted from the below public data sources:\n\n-   `CHILDCARE`: A point feature dataset that provides both location and attribute information of childcare centers. This dataset was downloaded from <a href=\"https://beta.data.gov.sg/datasets/d_5d668e3f544335f8028f546827b773b4/view\" target=\"_blank\">data.gov.sg</a> in GeoJSON format.\n\n-   `MP14_SUBZONE_WEB_PL`: A polygon feature dataset that contains information on the URA 2014 Master Plan Planning Subzone boundaries. This dataset is in ESRI Shapefile format and was also downloaded from <a href=\"https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view\" target=\"_blank\">data.gov.sg</a>.\n\n-   CostalOutline: A polygon feature dataset that shows the national boundary of Singapore. This dataset is provided by the Singapore Land Authority (SLA) and is in ESRI Shapefile format.\n\n# Import R Packages\n\n*p_load()* of pacman package is used to install and load **sf**, **tmap**, **tidyverse**, **spatstat** and **raster** packages into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n# Spatial Data Wrangling\n\n## Import Spatial Data\n\nFirst we use *st_read()* of sf package used to import these three geospatial data sets into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"data/ChildCareServices.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ChildCareServices' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- st_read(\"data/NationalMapPolygon.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SINGAPOREMAP_POLYGON' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\NationalMapPolygon.kml' \n  using driver `KML'\nSimple feature collection with 619 features and 2 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 103.5817 ymin: 1.158762 xmax: 104.4112 ymax: 1.513675\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\thuphuong1110\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n## Update appropriate EPSG Code and Coordinate system\n\nFirst, we check the predefined coordinate system of mpsz simple feature data frame using st_crs() of sf package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\n**Output interpretation**: The last lines of the print shows that EPSG code 9001 is used instead of the correct EPSG code 3414 for coordinate reference system svy21. The correct EPSG code is assigned to `mpsz_sf` data frame using *st_set_crs()* of sf package as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_set_crs(mpsz_sf,3414)\n```\n:::\n\n\nWe check the CRS again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\nThe EPSG code is now 3414.\n\nTransform `childcare_sf` to projected coordinate system\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_transform(childcare_sf, crs=3414)\n```\n:::\n\n\nChecking the CRS again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(childcare_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (40985.94 33848.38 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (28308.65 45530.47 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (17828.84 36607.36 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (25579.73 29221.89 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (38981.02 32483.41 0)\n```\n\n\n:::\n:::\n\n\nThe data is in svy21 projected coordinate system now. The Bounding box shows that values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n## Plot the Map from geospatial data sets\n\nAfter verifying the coordinate reference system (CRS) of each geospatial dataset, it is also helpful to plot a map to visualize their spatial patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_sf) +\n  tm_polygons() +\ntm_shape(childcare_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex021_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNotice that all the geospatial layers share the same map extent, indicating that their coordinate reference systems and values are aligned to the same spatial context. This alignment is crucial for any geospatial analysis.\n\nAlternatively, we can create a pin map using the code snippet below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n#  tm_dots()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\nIn interactive mode, tmap uses the Leaflet for R API. The benefit of this interactive pin map is that it allows us to freely navigate and zoom in or out. Additionally, we can click on each point to query detailed information about that feature. You can also change the background of the online map layer. Three options are currently available: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap, with ESRI.WorldGrayCanvas set as the default.\n\n**Note**: Always switch back to plot mode after using the interactive map, as each interactive session consumes a connection. Additionally, to prevent issues when publishing on Netlify, avoid displaying an excessive number of interactive maps (no more than 10) in a single RMarkdown document.\n\n# Geospatial Data wrangling\n\nAlthough simple feature data frames are becoming increasingly popular compared to the sp package’s Spatial\\* classes, many geospatial analysis packages still require geospatial data in the sp package's Spatial\\* format. In this section, you explore how to convert a simple feature data frame to an sp Spatial\\* class.\n\n## Convert sf data frames to sp’s Spatial\\* class\n\nThe code snippet below uses the as_Spatial() function from the sf package to convert the three geospatial datasets from simple feature data frames to sp Spatial\\* classes.\n",
    "supporting": [
      "Hands-on_Ex021_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}