---
title: "Take-home Exercise 3: Preparing HDB data for Geographically Weighted Predictive Model"
author: "Nguyen Bao Thu Phuong"
date: "21 October 2024" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Import R Packages

```{r}
pacman::p_load(tidyverse, sf, httr, jsonlite, rvest)
```

-   rvest: use for web crawling

-   jsonlite: to convert json file to dataframe format

-   tidyverse & sf: further data manipulation

# Import the Data

First we load in the Resale data from January 2023 to September 2024.

```{r}
resale <- read_csv("data/rawdata/resale.csv") %>%
  filter(month >= "2023-01" & month <= "2024-09")
```

```{r}
resale_tidy <- resale %>%
  mutate(address = paste(block,street_name)) %>%
  mutate(remaining_lease_yr = as.integer(
    str_sub(remaining_lease, 0, 2)))%>%
  mutate(remaining_lease_mth = as.integer(
    str_sub(remaining_lease, 9, 11)))
```

We narrow down the data scope to load into Onemap API later.

```{r}
resale_selected <- resale_tidy %>%
  filter(month == "2024-09")
```

Next we extract the list of unique addresses from `resale_selected`. The list is sorted to ensure the first address is always picked up.

```{r}
add_list <- sort(unique(resale_selected$address))
```

The below function read in any address list and record the coordinates of the parsed addresses.

```{r}
get_coords <- function(add_list){
  
  # Create a data frame to store all retrieved coordinates
  postal_coords <- data.frame()
    
  for (i in add_list){
    #print(i)
    # as the API provided code for 1 address search at a time only, for pasrsing a list of addresses we use the common/elastic/search syntax as below
    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',
           query=list(searchVal=i,
                     returnGeom='Y',
                     getAddrDetails='Y'))
    data <- fromJSON(rawToChar(r$content))
    found <- data$found
    res <- data$results
    
    # Create a new data frame for each address
    new_row <- data.frame()
    
    # If single result, append 
    if (found == 1){
      postal <- res$POSTAL 
      lat <- res$LATITUDE
      lng <- res$LONGITUDE
      new_row <- data.frame(address= i, 
                            postal = postal, 
                            latitude = lat, 
                            longitude = lng)
    }
    
    # If multiple results, drop NIL and append top 1
    else if (found > 1){
      # Remove those with NIL as postal
      res_sub <- res[res$POSTAL != "NIL", ]
      
      # Set as NA first if no Postal
      if (nrow(res_sub) == 0) {
          new_row <- data.frame(address= i, 
                                postal = NA, 
                                latitude = NA, 
                                longitude = NA)
      }
      
      else{
        top1 <- head(res_sub, n = 1)
        postal <- top1$POSTAL 
        lat <- top1$LATITUDE
        lng <- top1$LONGITUDE
        new_row <- data.frame(address= i, 
                              postal = postal, 
                              latitude = lat, 
                              longitude = lng)
      }
    }

    else {
      new_row <- data.frame(address= i, 
                            postal = NA, 
                            latitude = NA, 
                            longitude = NA)
    }
    
    # Add the row
    postal_coords <- rbind(postal_coords, new_row)
  }
  return(postal_coords)
}
```

We run the get_coords function on the `add_list`.

```{r}
coords <- get_coords(add_list)
```

```{r}
write_rds(coords, "data/rds/coords.rds")
```
