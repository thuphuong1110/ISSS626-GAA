---
title: "In-class Exercise 1: Geospatial Data Science with R"
author: "Nguyen Bao Thu Phuong"
date: "26 August 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Load the R packages

```{r}
pacman::p_load(tidyverse, sf, tmap, ggstatsplot)
```

# Import Geospatial Data

## Master Plan 2014 Subzone Boundary

Import Master Plan 2014 Subzone Boundary in shapefile and kml format

::: panel-tabset
### Shapefile

```{r}
mpsz14_shp = st_read(dsn = 'data', layer = 'MP14_SUBZONE_WEB_PL')
```

### KML

```{r}
#| eval: false
mpsz14_kml = st_read("data/MasterPlan2014SubzoneBoundaryWebKML.kml")
```

As the kml file downloaded is corrupted, we can write the shapefile back as kml format using below code chunk.

```{r}
st_write(mpsz14_shp,
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```
:::

## Master Plan 2019 Subzone Boundary

Next we load the master plan 2019 in shapefile and kml.

::: panel-tabset
### Shapefile

```{r}
mpsz19_shp = st_read(dsn = "data", layer = "MPSZ-2019")
```

The shapefile is in geographic coordinate system wgs84. This is commonly used in maps application on phone, as it's useful to recognize a location. However, this is not appropriate to be used in geospatial analysis as wgs84 reflects the degree of the lat-long, impacting the distance measurement. For this purpose, projected coordinate system should be used.

### KML format

```{r}
mpsz19_kml = st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```
:::

## Pre-school Location

We import the pre-school location in KML and Geojson format

Import KML file

```{r}
preschool_kml = st_read("data/PreSchoolsLocation.kml")
```

Import Geojson file

```{r}
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson") 
```

# Handling Coordinate System

First we check the pre-defined coordinate system of `mpsz19_shp`

```{r}
st_crs(mpsz19_shp)
```

## Transform coordinate system

We import Master Plan Sub-zone 2019 and Pre-school location again and reproject from geodetic CRS to projected coordinate system using below code chunk.

Import Master Plan Sub-zone 2019

```{r}
mpsz19_shp = st_read(dsn = "data",
                     layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Import Pre-school location

```{r}
preschool <- st_read("data/PreSchoolsLocation.kml") %>%
  st_transform(crs = 3414)
```

# Geospatial Data Wrangling

## Point-in-polygon count

The number of pre-school in each planning subzone can be counted using below code chunk.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

## Compute Density

Calculate the area of each subzone and compute the density of pre-school per square kilometers in at planning subzone level.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`Area` = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

# Statistical Analysis

Next we use appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.

```{r}
mpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp_df <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp_df,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric",
               label.var = "SUBZONE_N",
               label.expression = `PreSch Count` > 50)
```

# Working with Population Data

Import Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling csv file

```{r}
popdata <- read_csv("data/respopagesextod2023.csv")
```

## Data Wrangling

The below code chunk prepare a data.frame showing population by Planning Area and Planning subzone.

```{r}
popdata2023 <- popdata %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>%  
  ungroup() %>% 
  pivot_wider(names_from=AG,
              values_from = POP)

colnames(popdata2023)
```

## Data Processing

The below code chunk code chunk derives a tibble data.framewith the following fields PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY whereby:

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group.

```{r}
popdata2023 <- popdata2023 %>%
  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24
         +rowSums(.[14])) %>% # Aged 5 - 9
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59
  rowSums(.[15])) %>%  # Aged 60 -64
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,
         `TOTAL`, `DEPENDENCY`)
```

## Join the Population Data and Master Planning Subzone 2019

Before performing the georelational join, we convert the values in PA and SZ fields to uppercase, as the original values in these fields are made up of upper and lowercase, while SUBZONE_N and PLN_AREA_N values are in uppercase.

```{r}
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 
```

Next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.

Use `mpsz19_shp` as left table.

```{r}
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))
```

Use `popdata2023` as left table.

```{r}
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
```

## Choropleth Map of Dependency Ratio by Planning Subzone

```{r}
tm_shape(mpsz_pop2023)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE,
            bg.color = "bisque") +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",
             position = c("left", "bottom"))
```

## Percentile Map

A percentile map is a specific type of quantile map with six categories: 0-1%, 1-10%, 10-50%, 50-90%, 90-99%, and 99-100%. The breakpoints for these categories can be determined using the base R `quantile()` function, with a vector of cumulative probabilities specified as c(0, .01, .1, .5, .9, .99, 1). Ensure to include both the beginning and end points.

First we exclude records with NA using below code chunk.

```{r}
mpsz_pop2023 <- mpsz_pop2023 %>%
  drop_na()
```

Next we define a function to get the input data and field to be used for creating the percentile map.

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

The code chunk below creates a function for computing and plotting the percentile map.

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

The defined function is used to plot the percentile map.

```{r}
percentmap("DEPENDENCY", mpsz_pop2023)
```

## Box Map

A box map is an enhanced quartile map that includes additional lower and upper categories. If there are lower outliers, the breaks start with the minimum value, followed by the lower fence. If there are no lower outliers, the breaks start at the lower fence, with the second break at the minimum value. In this case, no observations will fall between the lower fence and the minimum value.

First we define below function to create break points for a box map.

Arguments:

-   v: vector with observations

-   mult: multiplier for IQR (default 1.5)

Output:

-   bb: vector with 7 break points computed quartile and fences

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

Next get.var function is defined to extract a variable as a vector out of an sf data frame.

Arguments:

-   vname: variable name (as character, in quotes)

-   df: name of sf data frame

Returns:

-   v: vector with values (without a column name)

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

Finally, the boxmap function is defined to create a box map.

Arguments:

-   vnam: variable name (as character, in quotes)

-   df: simple features polygon layer

-   legtitle: legend title

-   mtitle: map title

-   mult: multiplier for IQR

Returns:

-   a tmap-element (plots a map)

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```

Plotting a box map on `DEPENDENCY`.
```{r}
boxmap("DEPENDENCY", mpsz_pop2023)
```

Plot the box map in *view* mode
```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```
```{r}
tmap_mode("plot")
```