---
title: "In-class Exercise 4: Geographically Weighted Summary Statistics - GWmodel"
author: "Nguyen Bao Thu Phuong"
date: "16 September 2024" 
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
---

# Import R package

Import the relevant R package using `p_load()` of **pacman** package as in below code chunk.

```{r}
pacman::p_load(GWmodel, sf, spdep, tmap, tidyverse, knitr, ggstatsplot)
```

# Prepare the data

For this exercise, the `hunan` shapefile and `hunan_2012` data file will be used. Data is loaded into R environment using below code chunks

::: panel-tabset
## Hunan Shapefile

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## Hunan 2012 Data

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Join Hunan and Hunan 2012 data

The following code chunk uses `left_join()` from the **dplyr** package to update the attribute table of `hunan`â€™s SpatialPolygonsDataFrame by merging it with the attribute fields from the `hunan2012` dataframe.

```{r}
hunan_sf <- left_join(hunan,hunan2012, by = "County" ) %>%
  select(1:3, 7, 15, 16, 31, 32)
```
:::

# Visualize GDPPC geographic distribution

We plot the boundaries of Hunan's province (`basemap`) and a choropleth map showing the geographic distribution of GDPPC in Hunan (`gdppc`)\_ using below code chunk.

```{r}
basemap <- tm_shape(hunan_sf) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan_sf, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Convert to SpatialPolygonDataFrame

As GWmodel is built on sp object, we need to convert the sf object into sp object using below code chunk. In sp object, a list object is used to store the polygon coordinates.

```{r}
hunan_sp = as_Spatial(hunan_sf)
```

# Geographically Weighted summary statistics with adaptive bandwidth

## Determine adaptive bandwidth

::: panel-tabset

### Cross-validation

Cross validation of different bandwidth values is calculated using below code chunk, using approach = CV, longlat = T (to indicate the use of coordinates in degree)

```{r}
bw_CV = bw.gwr(GDPPC ~ 1, 
               data = hunan_sp,
               approach = "CV",
               adaptive = TRUE,
               kernel = "bisquare",
               longlat = T)
```

```{r}
bw_CV
```

### AIC

```{r}
bw_AIC = bw.gwr(GDPPC ~ 1, 
               data = hunan_sp,
               approach = "AIC",
               adaptive = TRUE,
               kernel = "bisquare",
               longlat = T)
```

```{r}
bw_AIC
```
:::

## Determine fixed bandwidth

### Cross Validation

```{r}
bw_CV_fixed = bw.gwr(GDPPC ~ 1, 
               data = hunan_sp,
               approach = "CV",
               adaptive = FALSE,
               kernel = "bisquare",
               longlat = T)
```

```{r}
bw_CV_fixed
```

### AIC

```{r}
bw_AIC_fixed = bw.gwr(GDPPC ~ 1, 
               data = hunan_sp,
               approach = "AIC",
               adaptive = FALSE,
               kernel = "bisquare",
               longlat = T)
```

```{r}
bw_AIC_fixed
```

## Compute geographically weighted summary statistics

```{r}
gwstat = gwss(data = hunan_sp,
              vars = "GDPPC",
              bw = bw_AIC,
              kernel = "bisquare",
              adaptive = TRUE,
              longlat = T)
```

Taking a look at the `gwstat` gwss object:

-   GDPPC_LM: the local means of 22 neighbours calculated for all the points

-   GDPPC_LVar: the local variance of 22 neighbours calculated for all the points

## Prepare the output data

The code chunk below is used to extract `SDF` data table from gwss object (output from `gwss()`). It is converted into data.frame using `as.data.frame()`.

```{r}
gwstat_df = as.data.frame(gwstat$SDF)
```

Next `cbind()` is used to append the newly derived data.frame onto `hunan_sf` sf data frame.

```{r}
hunan_gstat = cbind(hunan_sf, gwstat_df)
```

# Visualize geographically weighted summary statistics

We plot the distribution of geographically weighted mean using below code chunk.

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of Geographically Weighted Mean",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 0.5,
            legend.width = 1,
            frame = TRUE)
```

# Geographically Weighted Correlation with Adaptive Bandwidth

The below chart can be used to answer the business question: Is there any relationship between GDP per capita and Gross Industry Output?

```{r}
ggscatterstats(
  data = hunan2012, 
  x = Agri, 
  y = GDPPC,
  xlab = "Gross Agriculture Output", ## label for the x-axis
  ylab = "GDP per capita", 
  label.var = County, 
  label.expression = Agri > 10000 & GDPPC > 50000, 
  point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
  xfill = "#CC79A7", 
  yfill = "#009E73", 
  title = "Relationship between GDP PC and Gross Agriculture Output")
```

A geospatial analytics solution is carried out using the below steps.

First we determine the bandwidth
```{r}
bw <- bw.gwr(GDPPC ~ GIO, 
             data = hunan_sp, 
             approach = "AICc", 
             adaptive = TRUE)
```
Next we compute the correlation
```{r}
gwstats <- gwss(hunan_sp, 
                vars = c("GDPPC", "GIO"), 
                bw = bw,
                kernel = "bisquare",
                adaptive = TRUE, 
                longlat = T)
```

Finally, the code chunk below is used to extract SDF data table from gwss object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstats$SDF) %>%
  select(c(12,13)) %>%
  rename(gwCorr = Corr_GDPPC.GIO,
         gwSpearman = Spearman_rho_GDPPC.GIO)
```

Next, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.

```{r}
hunan_Corr <- cbind(hunan_sf, gwstat_df)
```

# Visualize Local Correlation

```{r}
tm_shape(hunan_Corr) +
  tm_fill(c("gwCorr","gwSpearman"),
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(title = c("Local Correlation Coefficient","Local Spearman Rho"),
            title.position = c("left","top"),
            title.size = 1.0,
            legend.text.size = 0.5,
            legend.height = 0.7, 
            legend.width = 0.7,
            legend.position = c("left","bottom"),
            frame = TRUE)
```


